main();

async function main() {
    const canvas = document.querySelector('#glCanvas');
    const gl = canvas.getContext('webgl');

    if (!gl) {
        alert('Unable to initialize WebGL; this browser or machine may not support it.');
        return;
    }

    const vsSource = `
        attribute vec4 aVertexPosition;
        attribute vec2 aTextureCoords;
        uniform mat4 uModelViewMatrix;
        uniform mat4 uProjectionMatrix;
        varying vec2 vTextureCoords;
        void main() {
            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
            vTextureCoords = aTextureCoords;
        }
    `

    const fsSource = `
        varying highp vec2 vTextureCoords;
        uniform sampler2D uTexture;
        void main() {
            gl_FragColor = texture2D(uTexture, vTextureCoords);
        }
    `

    const shaderProgram = initProgram(gl, vsSource, fsSource);

    const programInfo = {
        program: shaderProgram,
        attribLocations: {
            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
            textureCoords: gl.getAttribLocation(shaderProgram, 'aTextureCoords'),
        },
        uniformLocations: {
            projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
            modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),
            uTexture: gl.getUniformLocation(shaderProgram, 'uTexture'),
        }
    }

    const buffers = initBuffers(gl);

    const texture = await loadTexture(gl, 'texture.png');
    
    const rotator = new Rotator(canvas, () => draw(gl, programInfo, buffers, texture, rotator), 315, 5);
    
    draw(gl, programInfo, buffers, texture, rotator);
}

function initBuffers(gl) {
    const positions = [
        // F L R B T
        // 0,0 SW WATER TILE
        0, 12, 0,
        28, 12, 0,
        28, 12, 28,
        0, 12, 28,
        // 1,0
        28, 12, 0,
        56, 12, 0,
        56, 12, 28,
        28, 12, 28,
        // 2,0
        56, 12, 0,
        84, 12, 0,
        84, 12, 28,
        56, 12, 28,
        // 3,0
        84, 12, 28,
        84, 12, 0,
        84, 24, 0,
        84, 24, 28,

        84, 24, 0,
        112, 36, 0,
        112, 36, 28,
        84, 24, 28,
        // 4,0
        112, 36, 0,
        140, 36, 0,
        140, 36, 28,
        112, 36, 28,
        // 5,0
        140, 36, 28,
        140, 36, 0,
        140, 48, 0,
        140, 48, 28,

        140, 48, 0,
        168, 48, 0,
        168, 48, 28,
        140, 48, 28,
        // 6,0
        168, 48, 28,
        168, 48, 0,
        168, 60, 0,
        168, 60, 28,

        168, 60, 0,
        196, 60, 0,
        196, 60, 28,
        168, 60, 28,
        // 7,0
        196, 60, 28,
        196, 60, 0,
        196, 72, 0,
        196, 72, 28,

        196, 72, 0,
        224, 72, 0,
        224, 72, 28,
        196, 72, 28,
        // 8,0
        224, 72, 0,
        252, 72, 0,
        252, 72, 28,
        224, 72, 28,
        // 9,0 SE GRASS TILE
        252, 72, 0,
        280, 72, 0,
        280, 72, 28,
        252, 72, 28,

        // 0,1
        0, 12, 28,
        28, 12, 28,
        28, 12, 56,
        0, 12, 56,
        // 1,1
        28, 12, 28,
        56, 12, 28,
        56, 12, 56,
        28, 12, 56,
        // 2,1
        56, 12, 28,
        84, 12, 28,
        84, 12, 56,
        56, 12, 56,
        // 3,1
        84, 24, 28,
        112, 36, 28,
        84, 36, 28,

        84, 12, 56,
        84, 12, 28,
        84, 24, 28,
        84, 24, 56,
        84, 24, 56,
        84, 24, 28,
        84, 36, 28,
        84, 36, 56,

        84, 36, 28,
        112, 36, 28,
        112, 36, 56,
        84, 36, 56,
        // 4,1
        112, 36, 28,
        140, 36, 28,
        140, 36, 56,
        112, 36, 56,
        // 5,1
        140, 48, 28,
        168, 48, 28,
        168, 60, 28,
        140, 60, 28,
        140, 60, 28,
        168, 60, 28,
        168, 72, 28,
        140, 72, 28,

        140, 36, 56,
        140, 36, 28,
        140, 48, 28,
        140, 48, 56,
        140, 48, 56,
        140, 48, 28,
        140, 60, 28,
        140, 60, 56,
        140, 60, 56,
        140, 60, 28,
        140, 72, 28,
        140, 72, 56,

        140, 72, 28,
        168, 72, 28,
        168, 72, 56,
        140, 72, 56,
        // 6,1
        168, 60, 28,
        196, 60, 28,
        196, 72, 28,
        168, 72, 28,
        168, 72, 28,
        196, 72, 28,
        196, 84, 28,
        168, 84, 28,

        168, 72, 56,
        168, 72, 28,
        168, 84, 28,
        168, 84, 56,

        168, 84, 28,
        196, 84, 28,
        196, 84, 56,
        168, 84, 56,
        // 7,1
        196, 72, 28,
        224, 72, 28,
        224, 84, 28,
        196, 84, 28,

        196, 84, 28,
        224, 84, 28,
        224, 84, 56,
        196, 84, 56,
        // 8,1
        224, 72, 28,
        252, 72, 28,
        252, 84, 28,
        224, 84, 28,

        252, 72, 28,
        252, 72, 56,
        252, 84, 56,
        252, 84, 28,

        224, 84, 28,
        252, 84, 28,
        252, 84, 56,
        224, 84, 56,
        // 9,1
        252, 72, 28,
        280, 72, 28,
        280, 72, 56,
        252, 72, 56,

        // 0,2
        0, 12, 56,
        28, 12, 56,
        28, 12, 84,
        0, 12, 84,
        // 1,2
        28, 12, 56,
        56, 12, 56,
        56, 24, 56,
        28, 24, 56,
        28, 24, 56,
        56, 24, 56,
        56, 36, 56,
        42, 36, 56,
        42, 36, 56,
        56, 36, 56,
        56, 48, 56,

        28, 12, 84,
        28, 12, 56,
        28, 24, 56,
        28, 24, 84,
        28, 24, 84,
        28, 24, 56,
        28, 36, 70,
        28, 36, 84,
        28, 36, 84,
        28, 36, 70,
        28, 48, 84,

        28, 24, 56,
        42, 36, 56,
        28, 36, 70,
        28, 36, 70,
        42, 36, 56,
        56, 48, 56,
        28, 48, 84,
        56, 48, 56,
        56, 48, 84,
        28, 48, 84,
        // 2,2
        56, 12, 56,
        84, 12, 56,
        84, 24, 56,
        56, 24, 56,
        56, 24, 56,
        84, 24, 56,
        84, 36, 56,
        56, 36, 56,
        56, 36, 56,
        84, 36, 56,
        84, 48, 56,
        56, 48, 56,

        56, 48, 56,
        84, 48, 56,
        84, 48, 84,
        56, 48, 84,
        // 3,2
        84, 36, 56,
        112, 36, 56,
        112, 48, 56,
        84, 48, 56,

        84, 48, 56,
        112, 48, 56,
        112, 48, 84,
        84, 48, 84,
        // 4,2
        112, 36, 56,
        140, 36, 56,
        140, 48, 56,
        112, 48, 56,

        112, 48, 56,
        140, 48, 56,
        140, 48, 84,
        112, 48, 84,
        // 5,2
        140, 72, 56,
        168, 72, 56,
        168, 84, 56,
        140, 84, 56,
        140, 84, 56,
        168, 84, 56,
        168, 96, 56,
        140, 96, 56,

        140, 48, 84,
        140, 48, 56,
        140, 60, 56,
        140, 60, 84,
        140, 60, 84,
        140, 60, 56,
        140, 72, 56,
        140, 72, 84,
        140, 72, 84,
        140, 72, 56,
        140, 84, 56,
        140, 84, 84,
        140, 84, 84,
        140, 84, 56,
        140, 96, 56,
        140, 96, 84,

        140, 96, 56,
        168, 96, 56,
        168, 96, 84,
        140, 96, 84,
        // 6,2
        168, 84, 56,
        196, 84, 56,
        196, 96, 56,
        168, 96, 56,

        196, 84, 56,
        196, 84, 84,
        196, 96, 84,
        196, 96, 56,

        168, 96, 56,
        196, 96, 56,
        196, 96, 84,
        168, 96, 84,
        // 7,2
        196, 84, 56,
        224, 84, 56,
        224, 84, 84,
        196, 84, 84,
        // 8,2
        252, 60, 84,
        252, 72, 84,
        252, 72, 56,
        252, 72, 56,
        252, 72, 84,
        252, 84, 84,
        252, 84, 56,

        252, 72, 84,
        224, 84, 84,
        252, 84, 84,

        224, 84, 56,
        252, 84, 56,
        252, 84, 84,
        224, 84, 84,
        // 9,2
        252, 72, 56,
        280, 72, 56,
        280, 60, 84,
        252, 60, 84,

        // 0,3
        0, 12, 84,
        28, 12, 84,
        28, 24, 98,
        0, 24, 98,
        0, 24, 98,
        28, 24, 98,
        28, 36, 112,
        0, 36, 112,
        // 1,3
        28, 12, 84,
        28, 24, 84,
        28, 24, 98,
        28, 24, 98,
        28, 24, 84,
        28, 36, 84,
        28, 36, 112,
        28, 36, 112,
        28, 36, 84,
        28, 48, 84,
        28, 48, 112,

        28, 48, 84,
        56, 48, 84,
        56, 48, 112,
        28, 48, 112,
        // 2,3
        56, 48, 84,
        84, 48, 84,
        84, 48, 112,
        56, 48, 112,
        // 3,3
        84, 48, 84,
        112, 48, 84,
        112, 48, 112,
        84, 48, 112,
        // 4,3
        112, 48, 112,
        112, 48, 84,
        112, 60, 112,

        112, 48, 84,
        140, 48, 84,
        140, 60, 112,
        112, 60, 112,
        // 5,3
        140, 48, 84,
        140, 60, 84,
        140, 60, 112,
        140, 60, 112,
        140, 60, 84,
        140, 72, 84,
        140, 72, 112,
        140, 72, 112,
        140, 72, 84,
        140, 84, 84,
        140, 84, 112,
        140, 84, 112,
        140, 84, 84,
        140, 96, 84,
        140, 96, 112,

        140, 96, 84,
        168, 96, 84,
        168, 96, 112,
        140, 96, 112,
        // 6,3
        196, 84, 84,
        196, 84, 112,
        196, 96, 112,
        196, 96, 84,

        168, 96, 84,
        196, 96, 84,
        196, 96, 112,
        168, 96, 112,
        // 7,3
        224, 72, 112,
        196, 72, 112,
        196, 84, 112,
        224, 84, 112,

        196, 84, 84,
        224, 84, 84,
        224, 84, 112,
        196, 84, 112,
        // 8,3
        252, 60, 84,
        252, 60, 112,
        252, 72, 112,
        252, 72, 84,

        252, 60, 112,
        224, 60, 112,
        224, 72, 112,
        252, 72, 112,
        252, 72, 112,
        224, 72, 112,
        224, 84, 112,

        224, 84, 84,
        252, 72, 84,
        252, 72, 112,
        224, 84, 112,
        // 9,3
        252, 60, 84,
        280, 60, 84,
        280, 60, 112,
        252, 60, 112,
        
        // 0,4
        0, 36, 112,
        28, 36, 112,
        28, 48, 112,
        0, 48, 112,
        0, 48, 112,
        28, 48, 112,
        28, 60, 140,
        0, 60, 140,
        // 1,4
        28, 60, 140,
        28, 48, 112,
        56, 48, 112,
        56, 48, 140,
        // 2,4
        56, 48, 112,
        84, 48, 112,
        84, 48, 140,
        56, 48, 140,
        // 3,4
        84, 48, 112,
        112, 48, 112,
        112, 60, 112,

        84, 48, 112,
        112, 60, 112,
        112, 60, 140,
        84, 48, 140,
        // 4,4
        112, 60, 112,
        140, 60, 112,
        140, 60, 140,
        112, 60, 140,
        // 5,4
        140, 60, 140,
        140, 60, 112,
        140, 72, 112,
        140, 72, 140,
        140, 72, 140,
        140, 72, 112,
        140, 84, 112,
        140, 84, 140,
        140, 84, 140,
        140, 84, 112,
        140, 96, 112,
        140, 96, 140,

        140, 96, 112,
        168, 96, 112,
        168, 96, 140,
        140, 96, 140,
        // 6,4
        196, 72, 112,
        196, 72, 140,
        196, 84, 140,
        196, 84, 112,
        196, 84, 112,
        196, 84, 140,
        196, 96, 140,
        196, 96, 112,

        168, 96, 112,
        196, 96, 112,
        196, 96, 140,
        168, 96, 140,
        // 7,4
        224, 60, 112,
        224, 60, 140,
        224, 72, 140,
        224, 72, 112,

        196, 72, 112,
        224, 72, 112,
        224, 72, 140,
        196, 72, 140,
        // 8,4
        252, 48, 140,
        224, 48, 140,
        224, 60, 140,
        252, 60, 140,

        224, 60, 112,
        252, 60, 112,
        252, 60, 140,
        224, 60, 140,
        // 9,4
        280, 48, 140,
        252, 48, 140,
        252, 60, 140,

        252, 60, 112,
        280, 60, 112,
        280, 48, 140,
        252, 60, 140,
    ];
    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    const textureCoordinates = [
        // 0,0 SW WATER TILE
        148/256, 503/1024,
        167/256, 503/1024,
        167/256, 484/1024,
        148/256, 484/1024,
        // 1,0
        168/256, 503/1024,
        187/256, 503/1024,
        187/256, 484/1024,
        168/256, 484/1024,
        // 2,0
        188/256, 503/1024,
        207/256, 503/1024,
        207/256, 484/1024,
        188/256, 484/1024,
        // 3,0
        8.15/256, 17/1024,
        27/256, 17/1024,
        27/256, 8.15/1024,
        8.15/256, 8.15/1024,

        68.15/256, 759/1024,
        87/256, 759/1024,
        87/256, 740/1024,
        68.15/256, 740/1024,
        // 4,0
        68.15/256, 187/1024,
        87/256, 187/1024,
        87/256, 168/1024,
        68.15/256, 168/1024,
        // 5,0
        28.15/256, 137/1024,
        47/256, 137/1024,
        47/256, 128.15/1024,
        28.15/256, 128.15/1024,

        28.15/256, 127/1024,
        46.85/256, 127/1024,
        46.85/256, 108.15/1024,
        28.15/256, 108.15/1024,
        // 6,0
        48.15/256, 137/1024,
        67/256, 137/1024,
        67/256, 128.15/1024,
        48.15/256, 128.15/1024,

        48.15/256, 127/1024,
        66.85/256, 127/1024,
        66.85/256, 108.15/1024,
        48.15/256, 108.15/1024,
        // 7,0
        68.15/256, 137/1024,
        87/256, 137/1024,
        87/256, 128.15/1024,
        68.15/256, 128.15/1024,

        68.15/256, 127/1024,
        86.85/256, 127/1024,
        86.85/256, 108.15/1024,
        68.15/256, 108.15/1024,
        // 8,0
        148.5/256, 759/1024,
        167/256, 759/1024,
        167/256, 740.5/1024,
        148.5/256, 740.5/1024,
        // 9,0 SE GRASS TILE
        168/256, 759/1024,
        187/256, 759/1024,
        187/256, 740/1024,
        168/256, 740/1024,

        // 0,1
        148/256, 483/1024,
        167/256, 483/1024,
        167/256, 464/1024,
        148/256, 464/1024,
        // 1,1
        168/256, 483/1024,
        187/256, 483/1024,
        187/256, 464/1024,
        168/256, 464/1024,
        // 2,1
        188/256, 483/1024,
        207/256, 483/1024,
        207/256, 464/1024,
        188/256, 464/1024,
        // 3,1
        48/256, 157/1024,
        67/256, 148/1024,
        48/256, 148/1024,

        28.15/256, 167/1024,
        47/256, 167/1024,
        47/256, 158/1024,
        28.15/256, 158/1024,
        28.15/256, 157/1024,
        47/256, 157/1024,
        47/256, 148/1024,
        28.15/256, 148/1024,

        68.15/256, 739/1024,
        87/256, 739/1024,
        87/256, 720/1024,
        68.15/256, 720/1024,
        // 4,1
        68.15/256, 167/1024,
        87/256, 167/1024,
        87/256, 148/1024,
        68.15/256, 148/1024,
        // 5,1
        8.15/256, 147/1024,
        26.85/256, 147/1024,
        26.85/256, 138/1024,
        8.15/256, 138/1024,
        8.15/256, 137/1024,
        26.85/256, 137/1024,
        26.85/256, 128.15/1024,
        8.15/256, 128.15/1024,

        8.15/256, 117/1024,
        27/256, 117/1024,
        27/256, 108/1024,
        8.15/256, 108/1024,
        8.15/256, 107/1024,
        27/256, 107/1024,
        27/256, 98/1024,
        8.15/256, 98/1024,
        8.15/256, 97/1024,
        27/256, 97/1024,
        27/256, 88.15/1024,
        8.15/256, 88.15/1024,

        28.15/256, 106.85/1024,
        47/256, 106.85/1024,
        47/256, 88.15/1024,
        28.15/256, 88.15/1024,
        // 6,1
        8.15/256, 87/1024,
        27/256, 87/1024,
        27/256, 78/1024,
        8.15/256, 78/1024,
        8.15/256, 77/1024,
        27/256, 77/1024,
        27/256, 68/1024,
        8.15/256, 68/1024,

        8.15/256, 37/1024,
        27/256, 37/1024,
        27/256, 28/1024,
        8.15/256, 28/1024,

        8.15/256, 66.85/1024,
        27/256, 66.85/1024,
        27/256, 48.15/1024,
        8.15/256, 48.15/1024,
        // 7,1
        8.15/256, 77/1024,
        27/256, 77/1024,
        27/256, 68/1024,
        8.15/256, 68/1024,

        28/256, 66.85/1024,
        47/256, 66.85/1024,
        47/256, 48/1024,
        28/256, 48/1024,
        // 8,1
        48.15/256, 77/1024,
        67/256, 77/1024,
        67/256, 68/1024,
        48.15/256, 68/1024,

        68.15/256, 67/1024,
        87/256, 67/1024,
        87/256, 58.15/1024,
        68.15/256, 58.15/1024,

        48/256, 67/1024,
        66.85/256, 67/1024,
        66.85/256, 48/1024,
        48/256, 48/1024,
        // 9,1
        168.5/256, 739/1024,
        187/256, 739/1024,
        187/256, 720.15/1024,
        168.5/256, 720.15/1024,

        // 0,2
        148/256, 463/1024,
        167/256, 463/1024,
        167/256, 444.15/1024,
        148/256, 444.15/1024,
        // 1,2
        48.25/256, 17/1024,
        66.85/256, 17/1024,
        66.85/256, 8.4/1024,
        48.25/256, 8.4/1024,
        88/256, 136.85/1024,
        107/256, 136.85/1024,
        107/256, 128.15/1024,
        97.5/256, 128.15/1024,
        48/256, 417/1024,
        57/256, 417/1024,
        57/256, 408.4/1024,

        8.25/256, 161/1024,
        26.75/256, 161/1024,
        26.75/256, 152.4/1024,
        8.25/256, 152.4/1024,
        68.25/256, 53/1024,
        87/256, 53/1024,
        77.5/256, 44.25/1024,
        68.25/256, 44.25/1024,
        48.65/256, 393/1024,
        56.85/256, 393/1024,
        48.65/256, 384.4/1024,

        56/256, 373/1024,
        64/256, 360.25/1024,
        48/256, 360.25/1024,
        126.5/256, 185.85/1024,
        141.85/256, 185.85/1024,
        149.5/256, 176.25/1024,
        120/256, 176.25/1024,
        47/256, 719/1024,
        47/256, 700/1024,
        28.15/256, 700/1024,
        // 2,2
        48.30/256, 101/1024,
        67/256, 101/1024,
        67/256, 92.5/1024,
        48.30/256, 92.5/1024,
        88.30/256, 149/1024,
        107/256, 149/1024,
        107/256, 140.5/1024,
        88.30/256, 140.5/1024,
        140.30/256, 81/1024,
        159/256, 81/1024,
        159/256, 72.25/1024,
        140.30/256, 72.25/1024,

        48/256, 719/1024,
        67/256, 719/1024,
        67/256, 700/1024,
        48/256, 700/1024,
        // 3,2
        140.25/256, 201/1024,
        159/256, 201/1024,
        159/256, 192.25/1024,
        140.25/256, 192.25/1024,

        68/256, 719/1024,
        87/256, 719/1024,
        87/256, 700/1024,
        68/256, 700/1024,
        // 4,2
        48.25/256, 157/1024,
        67/256, 157/1024,
        67/256, 148.25/1024,
        48.25/256, 148.25/1024,

        88/256, 719/1024,
        107/256, 719/1024,
        107/256, 700/1024,
        88/256, 700/1024,
        // 5,2
        108.15/256, 955/1024,
        127/256, 955/1024,
        127/256, 946/1024,
        108.15/256, 946/1024,
        108.15/256, 945/1024,
        126.85/256, 945/1024,
        126.85/256, 936.15/1024,
        108.15/256, 936.15/1024,

        148/256, 935/1024,
        167/256, 935/1024,
        167/256, 926/1024,
        148/256, 926/1024,
        148/256, 925/1024,
        167/256, 925/1024,
        167/256, 916/1024,
        148/256, 916/1024,
        148/256, 915/1024,
        167/256, 915/1024,
        167/256, 906/1024,
        148/256, 906/1024,
        148/256, 905/1024,
        167/256, 905/1024,
        167/256, 896.15/1024,
        148/256, 896.15/1024,

        8.15/256, 915/1024,
        26.85/256, 915/1024,
        26.85/256, 896/1024,
        8.15/256, 896/1024,
        // 6,2
        128.15/256, 945/1024,
        147/256, 945/1024,
        147/256, 936.15/1024,
        128.15/256, 936.15/1024,

        48.15/256, 915/1024,
        67/256, 915/1024,
        67/256, 906.15/1024,
        48.15/256, 906.15/1024,

        28.15/256, 915/1024,
        47/256, 915/1024,
        47/256, 896.15/1024,
        28.15/256, 896.15/1024,
        // 7,2
        28.15/256, 47/1024,
        47/256, 47/1024,
        47/256, 28/1024,
        28.15/256, 28/1024,
        // 8,2
        107/256, 77/1024,
        107/256, 68/1024,
        88.15/256, 68/1024,
        88.15/256, 67/1024,
        107/256, 67/1024,
        107/256, 58.15/1024,
        88.15/256, 58.15/1024,

        220.15/256, 77/1024,
        239/256, 68.15/1024,
        220.15/256, 68.15/1024,

        48/256, 47/1024,
        67/256, 47/1024,
        67/256, 28/1024,
        48/256, 28/1024,
        // 9,2
        168.5/256, 719/1024,
        187/256, 719/1024,
        187/256, 700/1024,
        168.5/256, 700/1024,

        // 0,3
        28/256, 87/1024,
        47/256, 87/1024,
        47/256, 68.15/1024,
        28/256, 68.15/1024,
        68/256, 89/1024,
        87/256, 89/1024,
        87/256, 80.15/1024,
        68/256, 80.15/1024,
        // 1,3
        37/256, 502/1024,
        37/256, 493.4/1024,
        28.25/256, 493.4/1024,
        77.5/256, 77/1024,
        87/256, 77/1024,
        87/256, 68.4/1024,
        68/256, 68.4/1024,
        88.25/256, 213/1024,
        107/256, 213/1024,
        107/256, 204.25/1024,
        88.25/256, 204.25/1024,

        28.25/256, 699/1024,
        47/256, 699/1024,
        47/256, 680/1024,
        28.25/256, 680/1024,
        // 2,3
        48/256, 699/1024,
        67/256, 699/1024,
        67/256, 680/1024,
        48/256, 680/1024,
        // 3,3
        68/256, 699/1024,
        87/256, 699/1024,
        87/256, 680/1024,
        68/256, 680/1024,
        // 4,3
        48.25/256, 502/1024,
        67/256, 502.25/1024,
        48.25/256, 493.25/1024,

        88.25/256, 699/1024,
        107/256, 699/1024,
        107/256, 680/1024,
        88.25/256, 680/1024,
        // 5,3
        147/256, 935/1024,
        147/256, 926/1024,
        128/256, 926/1024,
        128/256, 925/1024,
        147/256, 925/1024,
        147/256, 916.15/1024,
        128/256, 916.15/1024,
        128/256, 914.85/1024,
        147/256, 914.85/1024,
        147/256, 906/1024,
        128/256, 906/1024,
        128/256, 905/1024,
        147/256, 905/1024,
        147/256, 896.15/1024,
        128/256, 896.15/1024,

        8.15/256, 895/1024,
        26.85/256, 895/1024,
        26.85/256, 876/1024,
        8.15/256, 876/1024,
        // 6,3
        68/256, 915/1024,
        86.85/256, 915/1024,
        86.85/256, 906.15/1024,
        68/256, 906.15/1024,

        28.15/256, 894.85/1024,
        47/256, 894.85/1024,
        47/256, 876/1024,
        28.15/256, 876/1024,
        // 7,3
        88.15/256, 87/1024,
        107/256, 87/1024,
        107/256, 78.15/1024,
        88.15/256, 78.15/1024,

        28/256, 27/1024,
        47/256, 27/1024,
        47/256, 8.15/1024,
        28/256, 8.15/1024,
        // 8,3
        8.15/256, 369/1024,
        27/256, 369/1024,
        27/256, 360.15/1024,
        8.15/256, 360.15/1024,

        8.15/256, 496/1024,
        27/256, 496/1024,
        27/256, 487/1024,
        8.15/256, 487/1024,
        8.15/256, 487/1024,
        27/256, 487/1024,
        27/256, 478/1024,

        148.25/256, 699/1024,
        167/256, 699/1024,
        167/256, 680/1024,
        148.25/256, 680/1024,
        // 9,3
        168.15/256, 699/1024,
        187/256, 699/1024,
        187/256, 680/1024,
        168.15/256, 680/1024,

        // 0,4
        120/256, 197/1024,
        139/256, 197/1024,
        139/256, 188.15/1024,
        120/256, 188.15/1024,
        8/256, 679/1024,
        27/256, 679/1024,
        27/256, 660/1024,
        8/256, 660/1024,
        // 1,4
        28/256, 660/1024,
        28/256, 679/1024,
        47/256, 679/1024,
        47/256, 660/1024,
        // 2,4
        48/256, 679/1024,
        67/256, 679/1024,
        67/256, 660/1024,
        48/256, 660/1024,
        // 3,4
        68/256, 369.25/1024,
        87/256, 369/1024,
        87/256, 360.25/1024,

        68/256, 679/1024,
        87/256, 679/1024,
        87/256, 660/1024,
        68/256, 660/1024,
        // 4,4
        88/256, 679/1024,
        107/256, 679/1024,
        107/256, 660/1024,
        88/256, 660/1024,
        // 5,4
        108/256, 925/1024,
        127/256, 925/1024,
        127/256, 916.15/1024,
        108/256, 916.15/1024,
        108/256, 914.85/1024,
        127/256, 914.85/1024,
        127/256, 906/1024,
        108/256, 906/1024,
        108/256, 905/1024,
        127/256, 905/1024,
        127/256, 896.15/1024,
        108/256, 896.15/1024,

        8.15/256, 875/1024,
        27/256, 875/1024,
        27/256, 856/1024,
        8.15/256, 856/1024,
        // 6,4
        8.15/256, 975/1024,
        27/256, 975/1024,
        27/256, 966/1024,
        8.15/256, 966/1024,
        8.15/256, 965/1024,
        27/256, 965/1024,
        27/256, 956.15/1024,
        8.15/256, 956.15/1024,

        28/256, 875/1024,
        47/256, 875/1024,
        47/256, 856/1024,
        28/256, 856/1024,
        // 7,4
        180.15/256, 17/1024,
        199/256, 17/1024,
        199/256, 8.25/1024,
        180.15/256, 8.25/1024,

        128.5/256, 679/1024,
        146.85/256, 679/1024,
        146.85/256, 660/1024,
        128.5/256, 660/1024,
        // 8,4
        200.15/256, 149/1024,
        219/256, 149/1024,
        219/256, 140.25/1024,
        200.15/256, 140.25/1024,

        148.25/256, 679/1024,
        167/256, 679/1024,
        167/256, 660.25/1024,
        148.25/256, 660.25/1024,
        // 9,4
        68/256, 382.25/1024,
        87/256, 382/1024,
        87/256, 373.25/1024,

        168.25/256, 679/1024,
        187/256, 679/1024,
        187/256, 660.25/1024,
        168.25/256, 660.25/1024,
    ];
    const textureCoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);

    const indices = [
        // 0,0 SW WATER TILE
        0, 1, 2,    0, 2, 3,
        // 1,0
        4, 5, 6,    4, 6, 7,
        // 2,0
        8, 9, 10,   8, 10, 11,
        // 3,0
        12, 13, 14, 12, 14, 15,

        16, 17, 18, 16, 18, 19,
        // 4,0
        20, 21, 22, 20, 22, 23,
        // 5,0
        24, 25, 26, 24, 26, 27,

        28, 29, 30, 28, 30, 31,
        // 6,0
        32, 33, 34, 32, 34, 35,

        36, 37, 38, 36, 38, 39,
        // 7,0
        40, 41, 42, 40, 42, 43,

        44, 45, 46, 44, 46, 47,
        // 8,0
        48, 49, 50, 48, 50, 51,
        // 9,0 SE GRASS TILE
        52, 53, 54, 52, 54, 55,

        // 0,1
        56, 57, 58, 56, 58, 59,
        // 1,1
        60, 61, 62, 60, 62, 63,
        // 2,1
        64, 65, 66, 64, 66, 67,
        // 3,1
        68, 69, 70,

        71, 72, 73, 71, 73, 74,
        75, 76, 77, 75, 77, 78,

        79, 80, 81, 79, 81, 82,
        // 4,1
        83, 84, 85, 83, 85, 86,
        // 5,1
        87, 88, 89, 87, 89, 90,
        91, 92, 93, 91, 93, 94,

        95, 96, 97, 95, 97, 98,
        99, 100, 101,   99, 101, 102,
        103, 104, 105,  103, 105, 106,

        107, 108, 109,  107, 109, 110,
        // 6,1
        111, 112, 113,  111, 113, 114,
        115, 116, 117,  115, 117, 118,

        119, 120, 121,  119, 121, 122,

        123, 124, 125,  123, 125, 126,
        // 7,1
        127, 128, 129,  127, 129, 130,

        131, 132, 133,  131, 133, 134,
        // 8,1
        135, 136, 137,  135, 137, 138,

        139, 140, 141,  139, 141, 142,

        143, 144, 145,  143, 145, 146,
        // 9,1
        147, 148, 149,  147, 149, 150,

        // 0,2
        151, 152, 153,  151, 153, 154,
        // 1,2
        155, 156, 157,  155, 157, 158,
        159, 160, 161,  159, 161, 162,
        163, 164, 165,

        166, 167, 168,  166, 168, 169,
        170, 171, 172,  170, 172, 173,
        174, 175, 176,

        177, 178, 179,
        180, 181, 182,  180, 182, 183,
        184, 185, 186,
        // 2,2
        187, 188, 189,  187, 189, 190,
        191, 192, 193,  191, 193, 194,
        195, 196, 197,  195, 197, 198,

        199, 200, 201,  199, 201, 202,
        // 3,2
        203, 204, 205,  203, 205, 206,

        207, 208, 209,  207, 209, 210,
        // 4,2
        211, 212, 213,  211, 213, 214,

        215, 216, 217,  215, 217, 218,
        // 5,2
        219, 220, 221,  219, 221, 222,
        223, 224, 225,  223, 225, 226,

        227, 228, 229,  227, 229, 230,
        231, 232, 233,  231, 233, 234,
        235, 236, 237,  235, 237, 238,
        239, 240, 241,  239, 241, 242,

        243, 244, 245,  243, 245, 246,
        // 6,2
        247, 248, 249,  247, 249, 250,

        251, 252, 253,  251, 253, 254,

        255, 256, 257,  255, 257, 258,
        // 7,2
        259, 260, 261,  259, 261, 262,
        // 8,2
        263, 264, 265,
        266, 267, 268,  266, 268, 269,

        270, 271, 272,

        273, 274, 275,  273, 275, 276,
        // 9,2
        277, 278, 279,  277, 279, 280,
        
        // 0,3
        281, 282, 283,  281, 283, 284,
        285, 286, 287,  285, 287, 288,
        // 1,3
        289, 290, 291,
        292, 293, 294,  292, 294, 295,
        296, 297, 298,  296, 298, 299,
        
        300, 301, 302,  300, 302, 303,
        // 2,3
        304, 305, 306,  304, 306, 307,
        // 3,3
        308, 309, 310,  308, 310, 311,
        // 4,3
        312, 313, 314,
        
        315, 316, 317,  315, 317, 318,
        // 5,3
        319, 320, 321,
        322, 323, 324,  322, 324, 325,
        326, 327, 328,  326, 328, 329,
        330, 331, 332,  330, 332, 333,

        334, 335, 336,  334, 336, 337,
        // 6,3
        338, 339, 340,  338, 340, 341,
        342, 343, 344,  342, 344, 345,
        // 7,3
        346, 347, 348,  346, 348, 349,

        350, 351, 352,  350, 352, 353,
        // 8,3
        354, 355, 356,  354, 356, 357,

        358, 359, 360,  358, 360, 361,
        362, 363, 364,

        365, 366, 367,  365, 367, 368,
        // 9,3
        369, 370, 371,  369, 371, 372,

        // 0,4
        373, 374, 375,  373, 375, 376,
        377, 378, 379,  377, 379, 380,
        // 1,4
        381, 382, 383,  381, 383, 384,
        // 2,4
        385, 386, 387,  385, 387, 388,
        // 3,4
        389, 390, 391,
        392, 393, 394,  392, 394, 395,
        // 4,4
        396, 397, 398,  396, 398, 399,
        // 5,4
        400, 401, 402,  400, 402, 403,
        404, 405, 406,  404, 406, 407,
        408, 409, 410,  408, 410, 411,

        412, 413, 414,  412, 414, 415,
        // 6,4
        416, 417, 418,  416, 418, 419,
        420, 421, 422,  420, 422, 423,

        424, 425, 426,  424, 426, 427,
        // 7,4
        428, 429, 430,  428, 430, 431,

        432, 433, 434,  432, 434, 435,
        // 8,4
        436, 437, 438,  436, 438, 439,

        440, 441, 442,  440, 442, 443,
        // 9,4
        444, 445, 446,

        447, 448, 449,  447, 449, 450,
    ];
    const indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);

    return {
        position: positionBuffer,
        textureCoords: textureCoordBuffer,
        indices: indexBuffer,
    };
}

async function loadTexture(gl, url) {
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);

    const image = new Image();

    const complete = new Promise(resolve => {
        image.onload = function() {
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    
            resolve(texture);
        };
    })
    image.src = url;
    return complete;
}

function draw(gl, programInfo, buffers, texture, rotator) {
    gl.clearColor(1.0, 1.0, 1.0, 1.0);
    gl.clearDepth(1.0);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LEQUAL);
    // gl.enable(gl.CULL_FACE);

    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    const projectionMatrix = glMatrix.mat4.create();
    glMatrix.mat4.ortho(projectionMatrix, 0, 500, 0, 500, 500, -500);

    const modelViewMatrix = glMatrix.mat4.create();
    let yRotation = rotator.getRotation();
    let scale = rotator.getScale();
    
    glMatrix.mat4.translate(modelViewMatrix, modelViewMatrix, [250, 250, 0]);
    glMatrix.mat4.rotate(modelViewMatrix, modelViewMatrix, 11*Math.PI/6, [1, 0, 0]);
    glMatrix.mat4.rotate(modelViewMatrix, modelViewMatrix, yRotation, [0, 1, 0]);
    glMatrix.mat4.scale(modelViewMatrix, modelViewMatrix, [scale, scale, scale]);
    glMatrix.mat4.translate(modelViewMatrix, modelViewMatrix, [-140, -60, -140]);
    // glMatrix.mat4.scale(modelViewMatrix, modelViewMatrix, [1, 2/3, 1]);

    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);

    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoords);
    gl.vertexAttribPointer(programInfo.attribLocations.textureCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(programInfo.attribLocations.textureCoords);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);

    gl.useProgram(programInfo.program);

    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);
    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);

    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.uniform1i(programInfo.uniformLocations.uTexture, 0);

    gl.drawElements(gl.TRIANGLES, 657, gl.UNSIGNED_SHORT, 0);
}

function initProgram(gl, vsSource, fsSource) {
    
    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vsSource);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        alert('An error occurred compiling the vertex shader: ' + gl.getShaderInfoLog(vertexShader));
        gl.deleteShader(vertexShader);
        return null;
    }

    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fsSource);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        alert('An error occurred compiling the fragment shader: ' + gl.getShaderInfoLog(fragmentShader));
        gl.deleteShader(fragmentShader);
        return null;
    }

    const shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
        return null;
    }

    return shaderProgram;
}